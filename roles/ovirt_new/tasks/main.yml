---
# tasks file for test

- name: Read variables from triliovault-nodes file
  include_vars: /etc/ansible/group_vars/triliovault-nodes
  tags:
    - daemon
    - proxy
    - clean-daemon


- name: Remove imageio if already present
  file:
    path: /opt/ovirt-imageio
    state: absent
  tags: 
    - daemon
    - clean-daemon

- name: check daemon version
  command: yum info ovirt-imageio-daemon
  register: daemon_version
  tags: 
    - daemon
    - clean-daemon 

 
- name: Check if fury.repo file exixts
  stat:
    path: /etc/yum.repos.d/fury.repo   
  register: fury_status
  tags:
    - daemon
    - clean-daemon 

- name: Remove fury.repo file if exists
  file:
    state: absent
    path: /etc/yum.repos.d/fury.repo
  when: fury_status.stat.exists
  tags:
    - daemon
    - clean-daemon

- name: Touch fury.repo file 
  copy:
    dest: "/etc/yum.repos.d/fury.repo"
    content: |
      [fury]
      name=Gemfury Private Repo
      baseurl=https://yum.fury.io/triliodata-rhv/
      enabled=1
      gpgcheck=0
  tags: 
    - daemon

- name: check old rpm installation
  shell: rpm -qa ovirt-imageio_1.6
  register: output
  tags:
    - daemon
    - clean-daemon

- name: Remove old rpm if alreday installed
  shell: rpm -e ovirt-imageio_1.6
  when: output.stdout | regex_search('ovirt-imageio_1.6')
  tags: 
    - daemon
    - clean-daemon


- name: check rpm installation
  shell: rpm -qa ovirt-imageio_1.7
  register: output
  tags:
    - daemon
    - clean-daemon

- name: Remove rpm if alreday installed
  shell: rpm -e ovirt-imageio_1.7
  when: output.stdout | regex_search('ovirt-imageio_1.7')
  tags: 
    - daemon
    - clean-daemon

- name: Install rpm from Gemfury
  shell: dnf -y install ovirt-imageio_1.7
  #when: daemon_version.stdout | regex_search('1.6|2.0')
  tags:
    - daemon

- name: Untar venv in ovirt-imageio
  shell: tar -pxvzf virtenv.tar.gz
  args:
    chdir: /opt/ovirt-imageio
  tags:
    - daemon


- name: Untar new venv
  shell: tar -pxvzf venv.tar.gz
  args:
    chdir: /opt/ovirt-imageio/daemon/datamover
  tags: daemon


- name: Change directory permissions
  file:
    path: /opt/ovirt-imageio
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon


- name: Check if redis service is running
  service:
    name: redis
    state: started
  register: redis_status
  tags: daemon

- name: Adding a redis config entry to not to save redis data
  command: redis-cli config set stop-writes-on-bgsave-error no
  tags: daemon

- name: Activate 5000 port in firewall
  firewalld:
    zone: public
    port: 5000/tcp
    permanent: yes
    state: enabled
  tags: daemon

- name: reload service firewalld
  systemd:
    name: firewalld
    state: reloaded
  tags: daemon

- name: Deactivate 5000 port in firewall in clean-daemon
  firewalld:
    zone: public
    port: 5000/tcp
    permanent: yes
    state: disabled
  tags: clean-daemon

- name: reload service firewalld
  systemd:
    name: firewalld
    state: reloaded
  tags: clean-daemon


- name: Stopping playbook execution as redis in not installed
  fail: msg="Please install redis" 
  when: redis_status.state == "stopped"
  tags: daemon

- name: copy workloadmgr.conf to host
  copy:
    src: /etc/workloadmgr/workloadmgr.conf
    dest: /etc
    owner: vdsm
    group: kvm
  no_log: true
  tags: 
    - daemon
    - clean-daemon

- name: read workloadmgr.conf file
  shell: cat /etc/workloadmgr.conf
  register: workload_details
  no_log: true
  tags: 
    - daemon
    - clean-daemon


- name: create workloadmgr directory on host
  file:
    path: /etc/workloadmgr
    state: directory
    mode: 0755
    group: kvm
    owner: vdsm
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon

- name: create directory tvault-object-store
  file:
     path: /var/log/tvault-object-store
     state: directory
     mode: 0755
     group: kvm
     owner: vdsm
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon

- name: create directory triliovault
  file:
     path: /var/triliovault
     state: directory
     mode: 0755
     group: kvm
     owner: vdsm
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon


- name: copy vault.conf inside host
  copy:
    src: /etc/workloadmgr/vault.conf
    dest: /etc/workloadmgr
    group: kvm
    owner: vdsm
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon

- name: change lines in vault.conf
  lineinfile:
    path: /etc/workloadmgr/vault.conf
    regexp: helper_command = /home/rhv/myansible/bin/privsep-helper
    line: helper_command = sudo /opt/ovirt-imageio/daemon/datamover/venv/bin/privsep-helper
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon

- name: copy certs inside host
  copy:
    src: /opt/stack/config-certs/ceph.cert
    dest: /opt/ovirt-imageio/
  when: workload_details.stdout | regex_search('vault_storage_type = s3') and workload_details.stdout | regex_search('s3_backend_type = localceph')
  register: certs
  tags: daemon

- name: change lines in vault.conf
  lineinfile:
    path: /etc/workloadmgr/vault.conf
    regexp: vault_s3_ssl_cert = /opt/stack/config-certs/ceph.cert
    line: vault_s3_ssl_cert = /opt/ovirt-imageio/ceph.cert
  when: workload_details.stdout | regex_search('vault_storage_type = s3') and workload_details.stdout | regex_search('s3_backend_type = localceph')
  tags: daemon

# - name: update ca
#   shell: update-ca-trust
#   when: certs is defined
#   tags: daemon

- name: do the encode
  shell: echo {{ storage_nfs_export | b64encode }}
  register: encoded_nfs_share
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: 
    - daemon
    - clean-daemon

- set_fact:
    encoded_nfs_share: "{{ encoded_nfs_share.stdout }}"
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: 
    - daemon
    - clean-daemon

- name: Creating mount path
  set_fact:
    mount_path: "{{ vault_data_directory }}/{{ encoded_nfs_share }}"
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: 
    - daemon
    - clean-daemon

- name: Check mount point {{ mount_path }}
  command: mountpoint {{ mount_path }}
  register: mount_state
  failed_when: False
  changed_when: False
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

# - name: debug
#   when: >
#      mount_state.stdout == "{{ mount_path }} is a mountpoint" and
#      workload_details.stdout | regex_search('vault_storage_type = nfs')
#   debug:
#     msg: "{{ mount_path }} is a mountpoint"
#   tags: daemon

# - name: debug
#   when: > 
#     mount_state.stdout == "{{ mount_path }} is not a mountpoint" and
#     workload_details.stdout | regex_search('vault_storage_type = nfs')
#   debug:
#     msg: "{{ mount_path }} is not a mountpoint"
#   tags: daemon

- name: Unmounting existing mount path
  mount: 
    path: "{{ mount_path }}"
    state: unmounted
  when: 
    workload_details.stdout | regex_search('vault_storage_type = nfs')
  ignore_errors: yes
  tags: daemon

- name: Creating mount path directory if it does not exist
  file:
    path: "{{ mount_path }}"
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon
  
- name: Mount NFS volume
  command: mount -t nfs -o rw,nolock,soft,intr,timeo=180,vers=3 {{ storage_nfs_export }} {{ mount_path }}
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon


- name: Test for vdsm entry in /etc/sudoers 
  shell: grep "^vdsm ALL = NOPASSWD" /etc/sudoers
  register: test_sudoers
  ignore_errors: yes
  tags: daemon

- name: Adding vdsm entry in /etc/sudoers
  lineinfile:
    line: "vdsm ALL = NOPASSWD: ALL"
    insertafter: EOF
    dest: /etc/sudoers
  when: test_sudoers.stdout == ""
  tags: daemon
  
- name: Test for NFS mount entry in fstab 
  shell: grep "^{{ storage_nfs_export }} {{ mount_path }}" /etc/fstab
  register: test_grep
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  ignore_errors: yes
  tags: daemon

- name: Adding NFS mount entry in fstab
  lineinfile:
    line: "{{ storage_nfs_export }} {{ mount_path }} nfs rw,nolock,soft,intr,timeo=180,vers=3 36 36"
    insertafter: EOF
    dest: /etc/fstab
  when:
    workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Check if trilio-datamover directory exists
  stat:
    path: /etc/trilio-datamover
  register: my_folder
  tags: daemon
 
- name: echo if directory already existed
  debug:
    msg: "the trilio-datamover directory is already existed"
  when: my_folder.stat.exists
  tags: daemon
 
- name: Create trilio-datamover directory if not exists
  file:
    path: /etc/trilio-datamover
    state: directory
    mode: 0755
    group: kvm
    owner: vdsm
  when: my_folder.stat.exists == false
  tags: daemon

- name: Check if datamover.conf exists
  stat: path=/etc/trilio-datamover/datamover.conf
  register: status
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

# - debug: var=status
#   tags: daemon

- name: Remove datamover.conf file if exists
  file:
    path: /etc/trilio-datamover/datamover.conf
    state: absent
  tags: daemon

- name: Add datamover.conf for s3
  copy:
    dest: "/etc/trilio-datamover/datamover.conf"
    content: |
      [s3_config]
      mount_path = /var/triliovault-mounts
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: 
    - daemon
  


- name: Touch datamover.conf file if does not exist
  file:
    state: touch
    path: /etc/trilio-datamover/datamover.conf
    owner: vdsm
    group: kvm
    mode: 0755
  when: 
    workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Remove mount path from datamover.conf befor daemon config
  ini_file:
    path: /etc/trilio-datamover/datamover.conf
    section: nfs_config
    state: absent
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Append empty line to datamover config file
  lineinfile:
    line: ''
    insertafter: EOF
    dest: /etc/trilio-datamover/datamover.conf
  with_items:
  - "\n"
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Append encoded nfs share to datamover conf file
  lineinfile:
    line: "[nfs_config]"
    insertafter: EOF
    dest: /etc/trilio-datamover/datamover.conf
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Append encoded nfs share to file
  lineinfile:
    line: "nfs_share = {{ storage_nfs_export }}"
    insertafter: EOF
    dest: /etc/trilio-datamover/datamover.conf
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon

- name: Append mount path to file
  lineinfile:
    line: "mount_path = {{ mount_path }}"
    insertafter: EOF
    dest: /etc/trilio-datamover/datamover.conf
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: daemon


- name: Remove mount path from datamover.conf for clean-daemon
  ini_file:
    path: /etc/trilio-datamover/datamover.conf
    section: nfs_config
    state: absent
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: clean-daemon

- name: Stop the existing trilio-datamover service
  service:
    name: trilio-datamover
    state: stopped
  ignore_errors: yes
  register: trilio_datamover
  tags: 
    - daemon
    - clean-daemon

- name: Stop Celery worker daemon if already running
  service:
    name: ovirt_celery
    state: stopped
  ignore_errors: yes
  tags: 
    - daemon
    - clean-daemon
  
  
- name: Stop tvault-object-store-service if already running
  service:
    name: tvault-object-store
    state: stopped
  ignore_errors: yes
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: 
    - daemon
    - clean-daemon

- name: Pause for 3 minutes to build app cache
  pause:
    minutes: 3
  tags:
    - daemon
    - clean-daemon

- debug:
    msg: "trilio-datamover is stopped"
  ignore_errors: yes
  when: trilio_datamover.state == "stopped"
  tags: daemon

- name: Add controller key to authorized_keys
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  tags: daemon


- name: Create directory to record daemon logs
  file:
    path: /var/log/imageio_daemon
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon

- name: Setup logrotate.d scripts
  template:
    src: logrotate.d.j2
    dest: "{{ logrotate_conf_dir }}{{ item.name }}"
  with_items: "{{ logrotate_scripts }}"
  when: logrotate_scripts is defined
  tags:
    - daemon


# Adding host entry in /etc/host of TVM

- name: register target ip
  set_fact:
    target_ip: "{{ ansible_default_ipv4.address }}"
  #register: target_ip
  tags: daemon


- debug:
    var: target_ip
  tags: daemon

- name: Getting fqdn of host
  shell: hostname
  register: fqdn
  tags: daemon

- name: Removing existing host entry from /etc/hosts before adding new
  lineinfile:
    dest: /etc/hosts
    regexp: '^{{ target_ip }}'
    state: absent
  tags: daemon

- name: copy workloadmgr.conf to host
  copy:
    src: /etc/tvault-config/tvault-config.conf
    dest: /etc
    owner: vdsm
    group: kvm
  tags: 
    - daemon

- name: register floating ip of tvault
  shell: cat /etc/tvault-config.conf | grep -e floating_ipaddress
  no_log: true
  register: tvault_ip
  tags: daemon

- name: print tvault ip
  debug:
    msg: "tvault_ip: {{ tvault_ip.stdout }}"
  tags: daemon

- set_fact:
    tvr_ip: "{{ tvault_ip.stdout | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') | first }}"
  tags: daemon

#- debug:
#    var: tvr_ip
#  tags: daemon

- name: Adding fqdn value to /etc/hosts of TVM
  lineinfile:
    path: /etc/hosts
    regexp: '(^\s+{{ target_ip }}([\w=/\-\.\,\_]+)*)\s*$'
    line: "{{ target_ip }} {{ fqdn.stdout }}"
  delegate_to: "{{ tvr_ip }}"
  tags: daemon

- name: Removing to tvault-config.conf from rhv host
  file:
    state: absent
    path: /etc/tvault-config.conf
  tags: daemon


# - name: Adding fqdn value to /etc/hosts of TVM # Commented out this task for Ansible_runner issue
#   lineinfile:
#     path: /etc/hosts
#     regexp: '(^\s+{{ target_ip }}([\w=/\-\.\,\_]+)*)\s*$'
#     line: "{{ target_ip }} {{ fqdn.stdout }}"
#   delegate_to: 127.0.0.1
#   tags: daemon

- name: Create directory to record logs
  file:
    path: /var/log/ovirt_celery
    state: directory
    owner: vdsm
    group: kvm
    recurse: yes
  tags: daemon

- name: copy object_store_mount.py file
  copy:
    src: /opt/ovirt-imageio/daemon/datamover/object_store_mount.py
    dest: /etc/workloadmgr
    remote_src: yes
    mode: u=rw,g=r,o=r
    owner: vdsm
    group: kvm
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon

- name: Check if trilio-datamover.service file exists
  stat:
    path: /usr/lib/systemd/system/trilio-datamover.service
  register: datamover_status
  tags:
     - daemon
     - clean-daemon

- name: Remove trilio-datamover.service file if exists
  file:
    state: absent
    path: /usr/lib/systemd/system/trilio-datamover.service
  when: datamover_status.stat.exists
  tags:
     - daemon
     - clean-daemon

- name: Copy the datamover service file
  copy:
    src: /opt/ovirt-imageio/service-files/trilio-datamover.service
    dest: /usr/lib/systemd/system/trilio-datamover.service
    remote_src: yes
    mode: u=rw,g=r,o=r
  tags: daemon

# - name: check if tvault-object-store service file exists
#   stat:
#     path: /usr/lib/systemd/system/tvault-object-store.service
#   register: tvault_status
#   when: >
#     workload_details.stdout | regex_search('vault_storage_type = s3') and
#     tvault_status.stat.exists
#   tags:
#     - daemon

# - name: Remove tvault-service  file if present
#   file:
#     state: absent
#     path: /usr/lib/systemd/system/tvault-object-store.service
#   when: >
#     workload_details.stdout | regex_search('vault_storage_type = s3') and
#     tvault_status.stat.exists
#   tags: 
#     - daemon
#     - clean-daemon

- name: copy tvault-object-store service file
  copy:
    src: /opt/ovirt-imageio/service-files/tvault-object-store.service
    dest: /usr/lib/systemd/system/tvault-object-store.service
    remote_src: yes
    mode: u=rw,g=r,o=r
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon


- name: Activate the celery virtualenv
  shell: source /opt/ovirt-imageio/virtenv/bin/activate
  tags: daemon

- name: Remove celery service file if already present
  file:
    path: /usr/lib/systemd/system/ovirt_celery.service
    state: absent
  tags: 
    - daemon
    - clean-daemon

- name: Copy the celery service file
  copy:
    src: /opt/ovirt-imageio/service-files/ovirt_celery.service
    dest: /usr/lib/systemd/system/ovirt_celery.service
    remote_src: yes
    owner: vdsm
    group: kvm
    mode: u=rw,g=r,o=r
  tags: daemon

- name: Systemctl daemon reload
  command: systemctl daemon-reload
  tags: 
    - daemon
    - clean-daemon

- name: Start trilio-datamover Service
  service:
    name: trilio-datamover
    enabled: yes
    state: started
  tags: 
    - daemon

- name: Start ovirt-celery Service
  service:
    name: ovirt_celery
    enabled: yes
    state: started
  tags: 
    - daemon

- name: Start tvault-object-store service
  service:
    name: tvault-object-store
    enabled: yes
    state: started
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: daemon


- name: Unmounting existing mount path
  mount: 
    path: "{{ mount_path }}"
    state: unmounted
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: clean-daemon


- name: Remove NFS mount entry in fstab
  lineinfile:
    line: "{{ storage_nfs_export }} {{ mount_path }} nfs rw,nolock,soft,intr,timeo=180,vers=3 36 36"
    state: absent
    dest: /etc/fstab
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: clean-daemon

# clean-daemon remove datamover service file, celery,datamover.conf, trilio-datamover directory
- name: Remove datamover-service,celery, datamover.conf files while clean-daemon
  file:
    path: '{{ item }}'
    state: absent
  with_items:
     - /usr/lib/systemd/system/trilio-datamover.service
     - /usr/lib/systemd/system/ovirt_celery.service
     - /etc/trilio-datamover/datamover.conf
     - /etc/trilio-datamover
  tags: clean-daemon

- name: remove service files created for tvault-object-store
  file:
    path: '{{ item }}'
    state: absent
  with_items:
     - /usr/lib/systemd/system/tvault-object-store.service
     - /etc/workloadmgr/vault.conf
     - /etc/workloadmgr/object_store_mount.py
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: clean-daemon

- name: Remove trilio-vault mount directory
  shell: rm -rf triliovault-mounts
  args:
    chdir: /var/
  when: workload_details.stdout | regex_search('vault_storage_type = nfs')
  tags: clean-daemon
  
# clean S3 directory from host
# - name: Unmount triliovault directory
#   shell: umount tmpfs
#   args:
#     chdir: /var/triliovault
#   when: workload_details.stdout | regex_search('vault_storage_type = s3')
#   tags: clean-daemon

- name: Unmount tmpfs directory
  shell: umount /var/triliovault/tmpfs
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  ignore_errors: yes
  register: unmount_status
  tags: clean-daemon

- name: Retry to unmount tmpfs directory on host
  shell: umount -f /var/triliovault/tmpfs
  when: workload_details.stdout | regex_search('vault_storage_type = s3') and unmount_status.rc != 0
  tags: clean-daemon

- name: Unmount triliovault-mounts directory
  shell: umount triliovault-mounts
  args:
    chdir: /var/
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: clean-daemon

- name: Remove triliovault directory
  shell: rm -rf triliovault
  args:
    chdir: /var/
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: clean-daemon

- name: Remove triliovault-mounts directory
  shell: rm -rf triliovault-mounts
  args:
    chdir: /var/
  when: workload_details.stdout | regex_search('vault_storage_type = s3')
  tags: clean-daemon



# - name: clean var/triliovault-mounts directory for nfs
#   file:
#     path: /var/triliovault-mounts
#     state: absent
#   when: workload_details.stdout | regex_search('vault_storage_type = nfs')
#   tags: clean-daemon

- name: remove workloadmgr.conf file
  file:
    path: /etc/workloadmgr.conf
    state: absent
  tags: clean-daemon

# proxy deployment

- name: Add controller key to authorized_keys
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  tags: proxy

- name: Check if trilio-plugin-resources directory exists
  stat:
    path: /usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources
  register: ui_status
  tags:
     - proxy
     - clean-proxy

- name: Remove directory trilio-plugin-resources if present
  file:
    state: absent
    path: /usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources
  when: ui_status.stat.exists
  tags:
     - proxy
     - clean-proxy


- name: Check if trilio-plugin.json file exists
  stat:
    path: /usr/share/ovirt-engine/ui-plugins/trilio-plugin.json
  register: file_status
  tags:
     - proxy
     - clean-proxy

- name: Remove trilio-plugin.json file if exists
  file:
    state: absent
    path: /usr/share/ovirt-engine/ui-plugins/trilio-plugin.json
  when: file_status.stat.exists
  tags:
     - proxy
     - clean-proxy

- name: create directory trilio-plugin-resources
  file:
    path: /usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources
    state: directory
  tags: proxy

- name: copy trilio-plugin-resources
  copy:
    src: /opt/stack/rhvgui-resources/trilio-plugin-resources/
    dest: /usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources
    directory_mode: yes
  tags: proxy

- name: copy json file
  copy:
    src: /opt/stack/rhvgui-resources/trilio-plugin.json
    dest: /usr/share/ovirt-engine/ui-plugins/
  tags: proxy

- name: main | updating rhvgui config file for new react app
  action: template src=data.js.j2 dest=/usr/share/ovirt-engine/ui-plugins/trilio-plugin-resources/config.js
  tags:
    - proxy
# Added changes for adding ca.pem to /etc/workloadmgr of TVM

- name: Rename ca.pem to engine.pem
  shell: cp ca.pem engine.pem
  args:
    chdir: /etc/pki/ovirt-engine
  tags: proxy
 
- name: copy engine.pem to TVM
  fetch:
    src: /etc/pki/ovirt-engine/engine.pem
    dest: /etc/workloadmgr/
    flat: yes
  tags: proxy


- name: Remove engine.pem from manager
  shell: rm -f engine.pem
  args:
    chdir: /etc/pki/ovirt-engine
  tags: proxy


# create_vars

- name: copy file ansible
  copy:
    src: /etc/workloadmgr/workloadmgr.conf
    dest: /etc
  tags: proxy


- name: extract password from file
  slurp:
    src: /etc/workloadmgr.conf
  no_log: true
  register: rhvpassword
  tags: proxy

  # - name: debug
  #   debug:
  #     msg: "Password is {{ rhvpassword['content'] | b64decode | regex_findall('rhv_password = (.+)') | first | b64decode}}"
  #   tags: proxy

- set_fact:
    decode_pass: "{{ rhvpassword['content'] | b64decode | regex_findall('rhv_password = (.+)') | first | b64decode}}"
  no_log: true
  tags: proxy


- name: create vars.yml on manager
  copy:
    dest: "/etc/vars.yml"
    content: |
        ---
  tags: proxy


- name: Add fields to vars.yml on TVR
  blockinfile:
    dest: "/etc/vars.yml"
    marker: "## {mark} added by ansible"
    block: |
        rhv_engine_fqdn: 
        rhv_password: 
        rhv_username:
    state: present
  tags: proxy


- name: copy password 
  lineinfile:
    dest: "/etc/vars.yml"
    regexp: "rhv_password"
    line: "rhv_password: {{ decode_pass | quote }} "
  tags: proxy

  
- name: check fqdn
  shell: hostname
  register: fqdn
  tags: proxy

- name: adding fqdn
  lineinfile:
    dest: "/etc/vars.yml"
    regexp: "rhv_engine_fqdn"
    line: "rhv_engine_fqdn: {{ fqdn.stdout }}"
  tags: proxy

- name: copy rhv username
  slurp:
    src: /etc/workloadmgr.conf
  register: rhvusername
  no_log: true
  tags: proxy

  

- name: Check RHV username from workloadmgr.conf
  shell: cat /etc/workloadmgr.conf | grep -e rhv_username
  register: username
  tags: proxy

- name: Print RHV username
  debug: 
    msg: "username: {{ username.stdout }}"
  tags: proxy

- set_fact:
    my_user: "{{ username.stdout | regex_findall('rhv_username = (.+)', '\\1') | first }}"
  tags: proxy
   
- name: Print actual RHV username
  debug:
    msg: "new: {{ my_user }}"
  tags: proxy

#- name: copy username to file
#  copy:
#    content: "{{ username.stdout }}"
#    dest: /etc/password.conf
#  tags: proxy


- name: Add username to vars.yml
  lineinfile:
    dest: "/etc/vars.yml"
    regexp: "rhv_username"
    line: "rhv_username: {{ my_user }}"
  tags: proxy
 
- name: Fetch vars.yml on TVR
  fetch:
    src: /etc/vars.yml
    dest: /opt/stack/imageio-ansible/roles/ovirt_new/tasks/
    flat: yes
  tags: proxy

- import_tasks: create_roles.yml
  tags: proxy

- import_tasks: clean_roles.yml
  tags: clean-proxy

- name: Copy workloadmgr.conf to host
  copy:
    src: /etc/tvault-config/tvault-config.conf
    dest: /etc
    owner: vdsm
    group: kvm
  tags: 
    - proxy
    - clean-proxy

- name: Register floating ip of tvault
  shell: cat /etc/tvault-config.conf | grep -e floating_ipaddress
  register: tvault_ip
  no_log: true
  tags:
    - proxy
    - clean-proxy

- name: Print tvault ip
  debug:
    msg: "tvault_ip: {{ tvault_ip.stdout }}"
  tags: 
    - proxy
    - clean-proxy

- set_fact:
    tvr_ip: "{{ tvault_ip.stdout | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') | first }}"
  tags: 
    - proxy
    - clean-proxy

- name: remove vars.yml file
  shell: rm -f vars.yml
  args:
    chdir: /opt/stack/imageio-ansible/roles/ovirt_new/tasks
  delegate_to: "{{ tvr_ip }}"
  tags: 
    - proxy
    - clean-proxy

- name: Removing to tvault-config.conf from rhv host
  file:
    state: absent
    path: /etc/tvault-config.conf
  tags: 
    - proxy
    - clean-proxy
